import org.asciidoctor.gradle.jvm.AsciidoctorTask

tasks.bootJar {
    enabled = false
}

tasks.jar {
    enabled = true
}

configurations {
    asciidoctorExt
}

dependencies {
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
}

tasks.register('prepareAsciidoc') {
    dependsOn ':adapter-inbound:test'

    def snippetsRoot = file("../adapter-inbound/build/generated-snippets")
    def snippetsDir = layout.buildDirectory.dir("snippets").get().asFile
    def generatedIndex = new File(snippetsDir, "index.adoc")

    inputs.dir snippetsRoot
    outputs.file generatedIndex
    outputs.dir snippetsDir

    doLast {
        println "=== Preparing AsciiDoc sources ==="

        if (!snippetsRoot.exists()) {
            throw new GradleException("Snippets directory not found: ${snippetsRoot.absolutePath}")
        }

        // 스니펫 복사
        copy {
            from snippetsRoot
            into snippetsDir
        }

        // index.adoc 생성
        def content = new StringBuilder()
        content << "= API Documentation\n"
        content << ":dotype: book\n"
        content << ":icons: font\n"
        content << ":source-highlighter: highlightjs\n"
        content << ":toc: left\n"
        content << ":toclevels: 5\n"
        content << ":sectlinks:\n"
        content << ":backend: html5\n\n"
        content << "== API Reference\n\n"

        // 2단계 디렉토리 구조 처리
        snippetsRoot.listFiles()
                ?.findAll { it.isDirectory() }
                ?.each { categoryDir ->
                    content << "=== ${formatName(categoryDir.name)}\n\n"

                    categoryDir.listFiles()
                            ?.findAll { it.isDirectory() }
                            ?.sort { it.name }
                            ?.each { apiDir ->
                                content << "==== ${formatName(apiDir.name)}\n\n"

                                // 공통 요청 정보
                                addCommonRequestInfo(content, categoryDir, apiDir)

                                // 응답을 탭으로 구성
                                addResponseTabs(content, categoryDir, apiDir)
                            }
                    content << "\n"
                }

        generatedIndex.parentFile.mkdirs()
        generatedIndex.text = content.toString()
        println "Generated index.adoc"
    }
}

static def addCommonRequestInfo(content, categoryDir, apiDir) {
    def requestSnippets = [
            'curl-request.adoc': 'Request Example',
            'http-request.adoc': 'HTTP Request',
            'request-headers.adoc': 'Request Headers',
            'request-fields.adoc': 'Request Body',
            'path-parameters.adoc': 'Path Parameters',
            'request-parameters.adoc': 'Query Parameters'
    ]

    requestSnippets.each { fileName, title ->
        def snippetFile = new File(apiDir, fileName)
        if (snippetFile.exists()) {
            content << "===== ${title}\n\n"
            content << "include::{snippets}/${categoryDir.name}/${apiDir.name}/${fileName}[]\n\n"
        }
    }
}

def addResponseTabs(content, categoryDir, apiDir) {
    // 응답 코드별 디렉토리 찾기 (201-response, 400-response 등)
    def responseDirectories = apiDir.listFiles()
            ?.findAll { it.isDirectory() && it.name.matches(/\d+-response/) }
            ?.sort { it.name }

    if (responseDirectories && !responseDirectories.isEmpty()) {
        content << "===== Responses\n\n"
        content << "[tabs]\n"
        content << "====\n"

        responseDirectories.each { responseDir ->
            def statusCode = responseDir.name.replaceAll(/-response$/, '')
            def statusText = getStatusText(statusCode)

            content << "${statusCode} ${statusText}::\n"
            content << "+\n"

            // 각 응답 디렉토리 안의 스니펫들 포함
            def responseFile = new File(responseDir, 'http-response.adoc')
            if (responseFile.exists()) {
                content << "include::{snippets}/${categoryDir.name}/${apiDir.name}/${responseDir.name}/http-response.adoc[]\n"
            }

            def fieldsFile = new File(responseDir, 'response-fields.adoc')
            if (fieldsFile.exists()) {
                content << "\n"
                content << "include::{snippets}/${categoryDir.name}/${apiDir.name}/${responseDir.name}/response-fields.adoc[]\n"
            }

            content << "\n"
        }

        content << "====\n\n"
    }
}

static def getStatusText(String code) {
    def statusTexts = [
            '200': 'OK',
            '201': 'Created',
            '204': 'No Content',
            '400': 'Bad Request',
            '401': 'Unauthorized',
            '404': 'Not Found',
            '500': 'Internal Server Error'
    ]
    return statusTexts[code] ?: 'Unknown'
}

static def formatName(String name) {
    return name.replaceAll('-', ' ')
            .split(' ')
            .collect { it.capitalize() }
            .join(' ')
}
// 2단계: HTML 생성
tasks.register('generateDocs', AsciidoctorTask) {
    dependsOn 'prepareAsciidoc'

    configurations 'asciidoctorExt'

    def snippetsDir = layout.buildDirectory.dir("snippets").get().asFile
    def outputDir = layout.buildDirectory.dir("docs-html").get().asFile

    sourceDir = snippetsDir
    sources {
        include '**/*.adoc'
    }

    inputs.dir snippetsDir
    outputs.dir outputDir

    attributes([
            'snippets': snippetsDir.absolutePath
    ])
}